#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ DEPLOY.PY - SISTEMA DE DEPLOY AUTOMATIZADO IA_JURIS
=====================================================

Este script automatiza o processo de deployment da aplica√ß√£o IA_Juris.
Ele √© projetado para ser robusto, flex√≠vel e aderir √†s melhores pr√°ticas
de seguran√ßa e opera√ß√£o.

Funcionalidades:
- Carregamento e valida√ß√£o de vari√°veis de ambiente necess√°rias.
- Build e push de imagens Docker.
- Execu√ß√£o de migra√ß√µes de banco de dados.
- Deploy para ambientes de orquestra√ß√£o (via placeholders para comandos externos).
- Integra√ß√£o de modelos de IA treinados.
- Tratamento de exce√ß√µes e logging detalhado.

Autor: Equipe IA_Juris
Data: 2025
Vers√£o: 1.0.0

Uso:
  python deploy.py --env <ambiente>
  python deploy.py --env production --build-only
  python deploy.py --env staging --skip-build

Vari√°veis de Ambiente Necess√°rias:
  - DEPLOY_ENVIRONMENT: Define o ambiente de deploy (e.g., development, staging, production).

  - REGISTRY_URL: URL do registry de containers (e.g., docker.io/youruser, 123456789012.dkr.ecr.us-east-1.amazonaws.com).

  - REGISTRY_USERNAME: Usu√°rio para autentica√ß√£o no registry.

  - REGISTRY_PASSWORD: Senha para autentica√ß√£o no registry.

  - DB_CONNECTION_STRING: String de conex√£o para o banco de dados (usada para migra√ß√µes).

  - AWS_ACCESS_KEY_ID (opcional, para ECR/ECS/EKS)

  - AWS_SECRET_ACCESS_KEY (opcional, para ECR/ECS/EKS)
  
  - KUBECONFIG (opcional, para Kubernetes)
"""

# =============================================================================
# 1. IMPORTA√á√ïES ORGANIZADAS
# =============================================================================

# Bibliotecas padr√£o
import os
import sys
import json
import logging
import argparse
import subprocess
import time
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional

# Bibliotecas de terceiros (com tratamento de exce√ß√µes para depend√™ncias n√£o cr√≠ticas)
try:
    from dotenv import load_dotenv
    _DOTENV_AVAILABLE = True
except ImportError:
    _DOTENV_AVAILABLE = False
    print("‚ö†Ô∏è Aviso: `python-dotenv` n√£o encontrado. Vari√°veis de ambiente devem ser carregadas manualmente.")

# M√≥dulos do projeto
# Assumimos que 'setup_database.py' e 'train_model.py' est√£o na mesma pasta 'script'
# ou que seus caminhos podem ser inferidos/configurados.
# Para evitar circular imports e manter o deploy.py independente, n√£o importamos
# diretamente setup_database ou train_model aqui, mas invocamos seus comandos via subprocess.
# Se esses scripts fossem fun√ß√µes, poder√≠amos import√°-los, mas para um deploy,
# √© mais comum invoc√°-los como execut√°veis independentes.


# =============================================================================
# 2. CONFIGURA√á√ÉO DE LOGGING
# =============================================================================

def setup_logging(level: str = "INFO", log_file: Optional[str] = None) -> logging.Logger:
    """
    Configura o sistema de logging para o script de deploy.
    
    Args:
        level (str): N√≠vel de log (DEBUG, INFO, WARNING, ERROR, CRITICAL).

        log_file (Optional[str]): Caminho para o arquivo de log. Se None, loga apenas no console.
    
    Returns:
        logging.Logger: Inst√¢ncia do logger configurada.
    """
    logger = logging.getLogger("IA_Juris_Deploy")
    logger.setLevel(getattr(logging, level.upper()))

    # Remove handlers existentes para evitar duplica√ß√£o
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Handler para console
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # Handler para arquivo
    if log_file:
        try:
            log_dir = Path(log_file).parent
            if log_dir: # Garante que n√£o √© apenas um nome de arquivo sem diret√≥rio
                log_dir.mkdir(parents=True, exist_ok=True)
            file_handler = logging.FileHandler(log_file, encoding='utf-8')
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
        except Exception as e:
            logger.error(f"Erro ao configurar log para arquivo '{log_file}': {e}")

    return logger

# Inst√¢ncia global do logger
logger = setup_logging()

# =============================================================================
# 3. UTILITIES
# =============================================================================

def get_env_var(name: str, required: bool = True, default: Optional[str] = None) -> str:
    """
    Obt√©m uma vari√°vel de ambiente, verificando se √© obrigat√≥ria.
    
    Args:
        name (str): Nome da vari√°vel de ambiente.

        required (bool): Se a vari√°vel √© obrigat√≥ria.

        default (Optional[str]): Valor padr√£o se a vari√°vel n√£o for encontrada e n√£o for obrigat√≥ria.
        
    Returns:
        str: Valor da vari√°vel de ambiente.
        
    Raises:
        ValueError: Se a vari√°vel obrigat√≥ria n√£o for encontrada.
    """
    value = os.getenv(name)
    if value is None:
        if required:
            logger.error(f"Vari√°vel de ambiente obrigat√≥ria n√£o definida: {name}")
            raise ValueError(f"Missing required environment variable: {name}")
        logger.warning(f"Vari√°vel de ambiente '{name}' n√£o definida, usando valor padr√£o: '{default}'")
        return default
    return value

def run_command(command: Union[str, List[str]], cwd: Optional[str] = None, check: bool = True) -> str:
    """
    Executa um comando de shell e captura a sa√≠da.
    
    Args:
        command (Union[str, List[str]]): Comando a ser executado.

        cwd (Optional[str]): Diret√≥rio de trabalho atual para o comando.

        check (bool): Se True, levanta uma exce√ß√£o se o comando retornar um status de erro.
        
    Returns:
        str: Sa√≠da padr√£o do comando.
        
    Raises:
        subprocess.CalledProcessError: Se o comando retornar um status de erro e `check` for True.
    """
    try:
        logger.debug(f"Executando comando: {' '.join(command) if isinstance(command, list) else command}")
        
        result = subprocess.run(
            command,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=check,
            shell=isinstance(command, str) # Use shell=True se o comando for uma string
        )
        if result.stdout:
            logger.debug(f"Comando output: {result.stdout.strip()}")
        if result.stderr:
            logger.warning(f"Comando stderr: {result.stderr.strip()}")
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"Comando falhou com c√≥digo {e.returncode}: {e.cmd}")
        logger.error(f"STDOUT: {e.stdout}")
        logger.error(f"STDERR: {e.stderr}")
        raise
    except FileNotFoundError:
        logger.error(f"Comando n√£o encontrado: {command[0] if isinstance(command, list) else command.split(' ')[0]}")
        raise
    except Exception as e:
        logger.error(f"Erro inesperado ao executar comando: {e}")
        raise

# =============================================================================
# 4. FUN√á√ïES DE DEPLOY ESPEC√çFICAS
# =============================================================================

def _load_environment_variables(environment: str) -> Dict[str, str]:
    """
    Carrega e valida as vari√°veis de ambiente necess√°rias para o deploy.
    
    Args:
        environment (str): O ambiente de deploy (e.g., 'production', 'staging').
        
    Returns:
        Dict[str, str]: Dicion√°rio de vari√°veis de ambiente validadas.
        
    Raises:
        ValueError: Se alguma vari√°vel de ambiente obrigat√≥ria estiver faltando.
    """
    logger.info(f"Carregando vari√°veis de ambiente para o ambiente: {environment.upper()}...")
    
    # Carregar .env se dispon√≠vel
    if _DOTENV_AVAILABLE:
        dotenv_path = Path('.') / '.env'
        if dotenv_path.exists():
            load_dotenv(dotenv_path=dotenv_path)
            logger.info(".env carregado.")
        else:
            logger.warning(".env n√£o encontrado. Verifique se as vari√°veis est√£o definidas no ambiente.")

    env_vars = {}
    
    # Vari√°veis de ambiente b√°sicas
    env_vars['DEPLOY_ENVIRONMENT'] = environment
    env_vars['REGISTRY_URL'] = get_env_var('REGISTRY_URL')
    env_vars['REGISTRY_USERNAME'] = get_env_var('REGISTRY_USERNAME')
    env_vars['REGISTRY_PASSWORD'] = get_env_var('REGISTRY_PASSWORD')
    
    # Vari√°veis espec√≠ficas do banco de dados (para migra√ß√µes)
    env_vars['DB_CONNECTION_STRING'] = get_env_var('DB_CONNECTION_STRING')
    
    # Vari√°veis espec√≠ficas de nuvem (ex: AWS)
    if environment == 'production': # Exemplo de vari√°vel espec√≠fica de produ√ß√£o
        env_vars['AWS_ACCESS_KEY_ID'] = get_env_var('AWS_ACCESS_KEY_ID', required=False)
        env_vars['AWS_SECRET_ACCESS_KEY'] = get_env_var('AWS_SECRET_ACCESS_KEY', required=False)

    logger.info("Vari√°veis de ambiente carregadas com sucesso.")
    return env_vars

def _build_and_push_docker_image(env_vars: Dict[str, str]) -> str:
    """
    Constr√≥i a imagem Docker da aplica√ß√£o e a envia para o registry.
    
    Args:
        env_vars (Dict[str, str]): Vari√°veis de ambiente carregadas.
        
    Returns:
        str: A tag completa da imagem Docker constru√≠da e enviada.
        
    Raises:
        subprocess.CalledProcessError: Se os comandos Docker falharem.
    """
    logger.info("Iniciando build e push da imagem Docker...")
    
    repo_name = "ia_juris_app"
    version = f"v{datetime.now().strftime('%Y%m%d%H%M%S')}"
    image_tag = f"{env_vars['REGISTRY_URL']}/{repo_name}:{version}"
    
    try:
        logger.info("Autenticando no registry Docker...")
        run_command([
            "docker", "login", env_vars['REGISTRY_URL'],
            "-u", env_vars['REGISTRY_USERNAME'],
            "--password-stdin"
        ], input=env_vars['REGISTRY_PASSWORD']) # Passa a senha via stdin para seguran√ßa
        
        logger.info(f"Construindo imagem Docker: {image_tag}...")
        # Assume que o Dockerfile est√° na raiz do projeto
        run_command(["docker", "build", ".", "-t", image_tag])
        
        logger.info(f"Enviando imagem Docker: {image_tag}...")
        run_command(["docker", "push", image_tag])
        
        logger.info(f"‚úÖ Imagem Docker constru√≠da e enviada com sucesso: {image_tag}")
        return image_tag
        
    except Exception as e:
        logger.error(f"Falha no build/push da imagem Docker: {e}")
        raise

def _run_database_migrations(env_vars: Dict[str, str]) -> None:
    """
    Executa as migra√ß√µes de banco de dados usando o script setup_database.py.
    
    Args:
        env_vars (Dict[str, str]): Vari√°veis de ambiente carregadas.
        
    Raises:
        subprocess.CalledProcessError: Se o script de migra√ß√£o falhar.
    """
    logger.info("Executando migra√ß√µes de banco de dados...")
    
    # Assumimos que setup_database.py est√° na pasta 'script'
    script_path = Path(__file__).parent / "setup_database.py"
    
    if not script_path.exists():
        logger.error(f"Script de setup de banco de dados n√£o encontrado: {script_path}")
        raise FileNotFoundError(f"setup_database.py n√£o encontrado em {script_path}")

    # Passa a string de conex√£o via vari√°vel de ambiente para o script de setup
    # Nota: para seguran√ßa, √© melhor usar um arquivo de configura√ß√£o para DB_CONNECTION_STRING
    # e passar o caminho para o setup_database.py
    
    # Definir um dicion√°rio de vari√°veis de ambiente para o subprocesso
    sub_env = os.environ.copy()
    sub_env['DB_CONNECTION_STRING'] = env_vars['DB_CONNECTION_STRING']

    try:
        # A flag --init for√ßa a cria√ß√£o do banco/tabelas se n√£o existirem
        # O script setup_database.py √© robusto e cuidar√° das migra√ß√µes
        run_command([sys.executable, str(script_path), "--init", "--log-level", logger.level_name], env=sub_env)
        
        # Opcional: popular dados iniciais se necess√°rio, ap√≥s as migra√ß√µes
        # run_command([sys.executable, str(script_path), "--populate", "--log-level", logger.level_name], env=sub_env)
        
        logger.info("‚úÖ Migra√ß√µes de banco de dados executadas com sucesso.")
        
    except Exception as e:
        logger.error(f"Falha na execu√ß√£o das migra√ß√µes de banco de dados: {e}")
        raise

def _deploy_to_orchestrator(image_tag: str, env_vars: Dict[str, str]) -> None:
    """
    Realiza o deploy da imagem Docker para o orquestrador (Kubernetes, ECS, etc.).
    
    Este √© um placeholder e deve ser customizado para o seu ambiente.
    
    Args:
        image_tag (str): A tag completa da imagem Docker a ser implantada.

        env_vars (Dict[str, str]): Vari√°veis de ambiente carregadas.
        
    Raises:
        Exception: Se o deploy falhar.
    """
    logger.info(f"Iniciando deploy para o orquestrador ({env_vars['DEPLOY_ENVIRONMENT'].upper()})...")
    
    # Exemplo para Kubernetes (requer kubectl configurado)
    if env_vars['DEPLOY_ENVIRONMENT'] == 'production':
        logger.info("Executando deploy para Kubernetes Production...")
        try:
            # Substitua este comando pelo seu comando kubectl apply, helm upgrade, etc.
            # Voc√™ pode usar um template YAML e substitu√≠-lo com a image_tag
            # Ex: sed -i "s|__IMAGE_TAG__|{image_tag}|g" k8s/deployment.yaml
            # Ex: run_command(["kubectl", "apply", "-f", "k8s/deployment.yaml", "-n", "production"])
            
            # Placeholder: Simular um deploy complexo
            logger.info(f"Simulando deploy de {image_tag} para Kubernetes...")
            time.sleep(5) # Simula o tempo de deploy
            logger.info("‚úÖ Deploy para Kubernetes Production simulado com sucesso.")
            
        except Exception as e:
            logger.error(f"Falha no deploy para Kubernetes Production: {e}")
            raise
    
    elif env_vars['DEPLOY_ENVIRONMENT'] == 'staging':
        logger.info("Executando deploy para ECS Staging...")
        try:
            # Exemplo para AWS ECS
            # run_command([
            #     "aws", "ecs", "update-service",
            #     "--cluster", "your-staging-cluster",
            #     "--service", "your-staging-service",
            #     "--force-new-deployment",
            #     "--task-definition", "your-task-definition-family" # Voc√™ precisaria de um Task Definition com a nova imagem
            # ])
            
            # Placeholder: Simular um deploy
            logger.info(f"Simulando deploy de {image_tag} para ECS Staging...")
            time.sleep(3) # Simula o tempo de deploy
            logger.info("‚úÖ Deploy para ECS Staging simulado com sucesso.")
            
        except Exception as e:
            logger.error(f"Falha no deploy para ECS Staging: {e}")
            raise
    else:
        logger.info("Nenhuma l√≥gica de orquestrador definida para este ambiente. Deploy manual pode ser necess√°rio.")
    
    logger.info("Processo de deploy para orquestrador conclu√≠do.")

def _integrate_ai_models(env_vars: Dict[str, str]) -> None:
    """
    Integra modelos de IA treinados (e.g., upload para S3/model registry, atualiza√ß√£o de servi√ßo).
    
    Este √© um placeholder e deve ser customizado para o seu ambiente.
    
    Args:
        env_vars (Dict[str, str]): Vari√°veis de ambiente carregadas.
        
    Raises:
        Exception: Se a integra√ß√£o dos modelos falhar.
    """
    logger.info("Iniciando integra√ß√£o de modelos de IA...")
    
    # Exemplo: Upload de modelos para um bucket S3
    model_path = Path("./models/latest_model.pt") # Caminho hipot√©tico do modelo
    if model_path.exists():
        logger.info(f"Encontrado modelo em {model_path}. Iniciando upload para S3...")
        try:
            # run_command([
            #     "aws", "s3", "cp", str(model_path),
            #     f"s3://your-model-bucket/{env_vars['DEPLOY_ENVIRONMENT']}/latest_model.pt"
            # ])
            logger.info(f"Simulando upload de modelo {model_path} para S3...")
            time.sleep(2)
            logger.info("‚úÖ Upload de modelo para S3 simulado com sucesso.")
            
            # Ap√≥s o upload, pode ser necess√°rio atualizar um servi√ßo de infer√™ncia
            # para carregar o novo modelo.
            # Ex: Fazer uma chamada de API para o servi√ßo de infer√™ncia.
            
        except Exception as e:
            logger.error(f"Falha na integra√ß√£o do modelo de IA (upload para S3): {e}")
            raise
    else:
        logger.warning(f"Nenhum modelo encontrado em {model_path}. Pulando integra√ß√£o de modelos.")
    
    logger.info("Integra√ß√£o de modelos de IA conclu√≠da.")

def _health_check(service_url: str, max_retries: int = 10, retry_delay: int = 5) -> None:
    """
    Realiza uma verifica√ß√£o de sa√∫de b√°sica na URL do servi√ßo.
    
    Args:
        service_url (str): URL do servi√ßo a ser verificado.

        max_retries (int): N√∫mero m√°ximo de tentativas.

        retry_delay (int): Atraso em segundos entre as tentativas.
        
    Raises:
        Exception: Se o servi√ßo n√£o estiver saud√°vel ap√≥s as retries.
    """
    logger.info(f"Executando verifica√ß√£o de sa√∫de para: {service_url}...")
    
    # Requer a biblioteca 'requests'
    try:
        import requests
    except ImportError:
        logger.warning("Biblioteca 'requests' n√£o encontrada. Verifica√ß√£o de sa√∫de HTTP desabilitada.")
        return
        
    for i in range(max_retries):
        try:
            response = requests.get(service_url, timeout=10)
            if response.status_code == 200:
                logger.info(f"‚úÖ Verifica√ß√£o de sa√∫de bem-sucedida para {service_url}.")
                return
            else:
                logger.warning(f"Verifica√ß√£o de sa√∫de falhou com status {response.status_code}. Tentativa {i+1}/{max_retries}.")
        except requests.exceptions.RequestException as e:
            logger.warning(f"Verifica√ß√£o de sa√∫de falhou: {e}. Tentativa {i+1}/{max_retries}.")
        
        time.sleep(retry_delay)
        
    logger.error(f"‚ùå Verifica√ß√£o de sa√∫de falhou ap√≥s {max_retries} tentativas para {service_url}.")
    raise Exception("Servi√ßo n√£o respondeu com status 200 OK.")

# =============================================================================
# 5. FUN√á√ÉO PRINCIPAL DEPLOY
# =============================================================================

def deploy(environment: str, skip_build: bool = False, build_only: bool = False,
           skip_migrations: bool = False, skip_orchestrator: bool = False,
           skip_ai_models: bool = False, skip_health_check: bool = False) -> None:
    """
    Fun√ß√£o principal que orquestra o processo de deploy.
    
    Args:
        environment (str): O ambiente de destino do deploy (e.g., 'development', 'staging', 'production').

        skip_build (bool): Se True, pula a etapa de build e push da imagem Docker.

        build_only (bool): Se True, executa apenas a etapa de build e push da imagem Docker e sai.

        skip_migrations (bool): Se True, pula a execu√ß√£o de migra√ß√µes de banco de dados.

        skip_orchestrator (bool): Se True, pula o deploy para o orquestrador.

        skip_ai_models (bool): Se True, pula a integra√ß√£o de modelos de IA.

        skip_health_check (bool): Se True, pula a verifica√ß√£o de sa√∫de p√≥s-deploy.
        
    Raises:
        Exception: Em caso de qualquer falha cr√≠tica no processo de deploy.
    """
    start_time = time.time()
    logger.info(f"üöÄ Iniciando processo de deploy para o ambiente '{environment.upper()}'...")

    try:
        # 1. Carregar e validar vari√°veis de ambiente
        env_vars = _load_environment_variables(environment)
        
        # 2. Build e Push da Imagem Docker
        image_tag = None
        if not skip_build:
            image_tag = _build_and_push_docker_image(env_vars)
        else:
            logger.info("Build e push da imagem Docker pulados (--skip-build).")
            # Se pular o build, o image_tag deve vir de algum lugar (e.g., vari√°vel de ambiente)
            image_tag = get_env_var('EXISTING_IMAGE_TAG', required=False, default='latest')
            if image_tag == 'latest':
                logger.warning("Usando 'latest' como image_tag. Certifique-se de que √© a imagem correta.")

        if build_only:
            logger.info("Modo 'build-only' ativado. Encerrando ap√≥s build.")
            return
            
        # 3. Executar Migra√ß√µes de Banco de Dados
        if not skip_migrations:
            _run_database_migrations(env_vars)
        else:
            logger.info("Migra√ß√µes de banco de dados puladas (--skip-migrations).")

        # 4. Deploy para o Orquestrador
        if not skip_orchestrator:
            if image_tag: # Garante que temos uma tag de imagem para deploy
                _deploy_to_orchestrator(image_tag, env_vars)
            else:
                logger.error("N√£o h√° imagem Docker para implantar. O deploy para orquestrador ser√° pulado.")
        else:
            logger.info("Deploy para orquestrador pulado (--skip-orchestrator).")

        # 5. Integra√ß√£o de Modelos de IA
        if not skip_ai_models:
            _integrate_ai_models(env_vars)
        else:
            logger.info("Integra√ß√£o de modelos de IA pulada (--skip-ai-models).")
            
        # 6. Verifica√ß√£o de Sa√∫de P√≥s-Deploy
        service_url = get_env_var('SERVICE_HEALTH_URL', required=False) # URL do servi√ßo para health check
        if not skip_health_check and service_url:
            _health_check(service_url)
        elif not service_url:
            logger.warning("SERVICE_HEALTH_URL n√£o definida. Verifica√ß√£o de sa√∫de p√≥s-deploy pulada.")
        else:
            logger.info("Verifica√ß√£o de sa√∫de p√≥s-deploy pulada (--skip-health-check).")

        end_time = time.time()
        duration = end_time - start_time
        logger.info(f"üéâ Processo de deploy para '{environment.upper()}' conclu√≠do com sucesso em {duration:.2f} segundos!")

    except ValueError as ve:
        logger.critical(f"‚ùå Erro de configura√ß√£o: {ve}")
        logger.critical("Deploy falhou devido a configura√ß√£o ou vari√°veis de ambiente ausentes/inv√°lidas.")
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        logger.critical(f"‚ùå Erro de comando externo: {e.cmd} falhou com c√≥digo {e.returncode}.")
        logger.critical("Verifique os logs acima para detalhes sobre a falha do comando.")
        sys.exit(1)
    except FileNotFoundError as e:
        logger.critical(f"‚ùå Erro de arquivo: {e}. Certifique-se de que todos os scripts e arquivos necess√°rios existam.")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"‚ùå Erro inesperado durante o deploy: {e}")
        logger.critical(f"Traceback:\n{traceback.format_exc()}") # Loga o traceback completo para depura√ß√£o
        sys.exit(1)

# =============================================================================
# 6. BLOCO PRINCIPAL DE EXECU√á√ÉO
# =============================================================================

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="üöÄ Script de Deploy para IA_Juris",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python deploy.py --env development
  python deploy.py --env staging --skip-migrations --skip-health-check
  python deploy.py --env production --build-only
  python deploy.py --env production --log-level DEBUG --log-file deploy.log
        """
    )
    
    parser.add_argument(
        "--env",
        type=str,
        required=True,
        choices=['development', 'staging', 'production', 'test'], # Adicione outros ambientes conforme necess√°rio
        help="Ambiente de destino para o deploy."
    )
    parser.add_argument(
        "--skip-build",
        action="store_true",
        help="Pular a etapa de build e push da imagem Docker."
    )
    parser.add_argument(
        "--build-only",
        action="store_true",
        help="Executar apenas o build e push da imagem Docker, e sair."
    )
    parser.add_argument(
        "--skip-migrations",
        action="store_true",
        help="Pular a execu√ß√£o de migra√ß√µes de banco de dados."
    )
    parser.add_argument(
        "--skip-orchestrator",
        action="store_true",
        help="Pular o deploy para o orquestrador (Kubernetes, ECS, etc.)."
    )
    parser.add_argument(
        "--skip-ai-models",
        action="store_true",
        help="Pular a integra√ß√£o de modelos de IA."
    )
    parser.add_argument(
        "--skip-health-check",
        action="store_true",
        help="Pular a verifica√ß√£o de sa√∫de p√≥s-deploy."
    )
    parser.add_argument(
        "--log-level",
        type=str,
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="N√≠vel de detalhe do log."
    )
    parser.add_argument(
        "--log-file",
        type=str,
        help="Caminho para o arquivo de log."
    )
    
    args = parser.parse_args()
    
    # Reconfigurar logger com base nos argumentos da linha de comando
    logger = setup_logging(args.log_level, args.log_file)
    
    # Chama a fun√ß√£o principal de deploy com os argumentos fornecidos
    deploy(
        environment=args.env,
        skip_build=args.skip_build,
        build_only=args.build_only,
        skip_migrations=args.skip_migrations,
        skip_orchestrator=args.skip_orchestrator,
        skip_ai_models=args.skip_ai_models,
        skip_health_check=args.skip_health_check
    )